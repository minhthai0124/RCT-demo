{"ast":null,"code":"import toastr from 'toastr';\nimport { merge } from 'lodash';\nconst singletonEnforcer = Symbol();\n\nclass Notifications {\n  constructor(enforcer) {\n    if (enforcer !== singletonEnforcer) {\n      throw new Error('Cannot initialize notifications single instance');\n    }\n\n    this.notificationClient = toastr;\n    this.notificationClient.options = {\n      preventDuplicates: true\n    };\n  }\n\n  static get instance() {\n    if (!this.notificationInstance) {\n      this.notificationInstance = new Notifications(singletonEnforcer);\n    }\n\n    return this.notificationInstance;\n  }\n\n  success(message, title, options = {}) {\n    this.notificationClient.success(title, message, merge(options, this.notificationClient.options));\n  }\n\n  info(message, title, options = {}) {\n    this.notificationClient.success(title, message, merge(options, this.notificationClient.options));\n  }\n\n  error(message, title, options = {}) {\n    this.notificationClient.error(title, message, merge(options, this.notificationClient.options));\n  }\n\n  warning(message, title, options = {}) {\n    this.notificationClient.warning(title, message, merge(options, this.notificationClient.options));\n  }\n\n  removeAll() {\n    this.notificationClient.clear();\n  }\n\n}\n\nexport default Notifications.instance;","map":{"version":3,"sources":["/home/nl/Documents/demo-webRTC/demo-app/src/utils/notifications.js"],"names":["toastr","merge","singletonEnforcer","Symbol","Notifications","constructor","enforcer","Error","notificationClient","options","preventDuplicates","instance","notificationInstance","success","message","title","info","error","warning","removeAll","clear"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;AACA,SAASC,KAAT,QAAsB,QAAtB;AAEA,MAAMC,iBAAiB,GAAGC,MAAM,EAAhC;;AAEA,MAAMC,aAAN,CAAoB;AAKlBC,EAAAA,WAAW,CAACC,QAAD,EAAW;AACpB,QAAIA,QAAQ,KAAKJ,iBAAjB,EAAoC;AAClC,YAAM,IAAIK,KAAJ,CAAU,iDAAV,CAAN;AACD;;AAED,SAAKC,kBAAL,GAA0BR,MAA1B;AACA,SAAKQ,kBAAL,CAAwBC,OAAxB,GAAkC;AAChCC,MAAAA,iBAAiB,EAAE;AADa,KAAlC;AAGD;;AAEkB,aAARC,QAAQ,GAAG;AACpB,QAAG,CAAC,KAAKC,oBAAT,EAA+B;AAC7B,WAAKA,oBAAL,GAA4B,IAAIR,aAAJ,CAAkBF,iBAAlB,CAA5B;AACD;;AAED,WAAO,KAAKU,oBAAZ;AACD;;AAEDC,EAAAA,OAAO,CAACC,OAAD,EAAUC,KAAV,EAAiBN,OAAO,GAAG,EAA3B,EAAgC;AACrC,SAAKD,kBAAL,CAAwBK,OAAxB,CAAgCE,KAAhC,EAAuCD,OAAvC,EAAgDb,KAAK,CACnDQ,OADmD,EAEnD,KAAKD,kBAAL,CAAwBC,OAF2B,CAArD;AAID;;AAEDO,EAAAA,IAAI,CAACF,OAAD,EAAUC,KAAV,EAAiBN,OAAO,GAAG,EAA3B,EAAgC;AAClC,SAAKD,kBAAL,CAAwBK,OAAxB,CAAgCE,KAAhC,EAAuCD,OAAvC,EAAgDb,KAAK,CACnDQ,OADmD,EAEnD,KAAKD,kBAAL,CAAwBC,OAF2B,CAArD;AAID;;AAEDQ,EAAAA,KAAK,CAACH,OAAD,EAAUC,KAAV,EAAiBN,OAAO,GAAG,EAA3B,EAAgC;AACnC,SAAKD,kBAAL,CAAwBS,KAAxB,CAA8BF,KAA9B,EAAqCD,OAArC,EAA8Cb,KAAK,CACjDQ,OADiD,EAEjD,KAAKD,kBAAL,CAAwBC,OAFyB,CAAnD;AAID;;AAEDS,EAAAA,OAAO,CAACJ,OAAD,EAAUC,KAAV,EAAiBN,OAAO,GAAG,EAA3B,EAAgC;AACrC,SAAKD,kBAAL,CAAwBU,OAAxB,CAAgCH,KAAhC,EAAuCD,OAAvC,EAAgDb,KAAK,CACnDQ,OADmD,EAEnD,KAAKD,kBAAL,CAAwBC,OAF2B,CAArD;AAID;;AAEDU,EAAAA,SAAS,GAAE;AACT,SAAKX,kBAAL,CAAwBY,KAAxB;AACD;;AAtDiB;;AAyDpB,eAAehB,aAAa,CAACO,QAA7B","sourcesContent":["import toastr from 'toastr'\nimport { merge } from 'lodash'\n\nconst singletonEnforcer = Symbol()\n\nclass Notifications {\n  notificationClient\n\n  static notificationInstance\n\n  constructor(enforcer) {\n    if (enforcer !== singletonEnforcer) {\n      throw new Error('Cannot initialize notifications single instance')\n    }\n\n    this.notificationClient = toastr\n    this.notificationClient.options = {\n      preventDuplicates: true\n    }\n  }\n\n  static get instance() {\n    if(!this.notificationInstance) {\n      this.notificationInstance = new Notifications(singletonEnforcer)\n    }\n\n    return this.notificationInstance\n  }\n\n  success(message, title, options = {} ) {\n    this.notificationClient.success(title, message, merge(\n      options,\n      this.notificationClient.options\n    ))\n  }\n\n  info(message, title, options = {} ) {\n    this.notificationClient.success(title, message, merge(\n      options,\n      this.notificationClient.options\n    ))\n  }\n\n  error(message, title, options = {} ) {\n    this.notificationClient.error(title, message, merge(\n      options,\n      this.notificationClient.options\n    ))\n  }\n\n  warning(message, title, options = {} ) {\n    this.notificationClient.warning(title, message, merge(\n      options,\n      this.notificationClient.options\n    ))\n  }\n\n  removeAll(){\n    this.notificationClient.clear()\n  }\n}\n\nexport default Notifications.instance\n"]},"metadata":{},"sourceType":"module"}